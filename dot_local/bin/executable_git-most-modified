#!/usr/bin/env zsh
# git-hotfiles - Shows the most frequently modified files in a Git repository

# Output colors
red='\e[1;31m'
green='\e[1;32m'
yellow='\e[1;33m'
blue='\e[1;34m'
white='\e[0;37m'

usage() {
    program_name=$(basename "$0")
    cat <<EOF
Usage: $program_name [options]
Shows the most frequently modified files in a Git repository.

Options:
    -h, --help               Show this message
    -p, --path PREFIX        Filter files by path prefix (matches only at beginning of path)
    -a, --author AUTHOR      Filter commits by author
    -n, --limit NUMBER       Limit output to N most modified files (default: 10)
    -s, --since DATE         Consider only commits after specified date
    
Examples:
    $program_name                            # Show 10 most modified files
    $program_name -n 20                      # Show 20 most modified files
    $program_name -p "src/"                  # Show only files in src/ directory at the root
    $program_name -a "John Smith"            # Show only files modified by John Smith
    $program_name -s "2023-01-01"            # Show files modified since Jan 1, 2023
EOF
}

check_dependencies() {
    local dependencies=("git" "grep" "sort" "sed" "awk")
    local missing_deps=()

    for dep in "${dependencies[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo -e "${red}Error: Missing dependencies: ${missing_deps[*]}${white}"
        echo "Please install them before running this script."
        exit 1
    fi
}

check_git_repo() {
    if ! git rev-parse --is-inside-work-tree &> /dev/null; then
        echo -e "${red}Error: Not a Git repository${white}"
        exit 1
    fi
}

get_hot_files() {
    local path_filter="$1"
    local author_filter="$2"
    local limit="$3"
    local since_date="$4"
    
    # Build git command
    local git_cmd="git log --name-only --pretty=format:"
    
    # Add filters
    if [[ -n "$author_filter" ]]; then
        git_cmd+=" --author=\"$author_filter\""
    fi
    
    if [[ -n "$since_date" ]]; then
        git_cmd+=" --since=\"$since_date\""
    fi
    
    # Show applied filters
    echo -e "${blue}Searching for most modified files...${white}"
    if [[ -n "$path_filter" ]]; then
        echo -e "${blue}Path filter: $path_filter${white}"
    fi
    if [[ -n "$author_filter" ]]; then
        echo -e "${blue}Author filter: $author_filter${white}"
    fi
    if [[ -n "$since_date" ]]; then
        echo -e "${blue}Considering commits since: $since_date${white}"
    fi
    echo -e "${blue}Limit: $limit files${white}"
    
    # Execute command and process output
    echo -e "\nMost frequently modified files:"
    
    local result
    if [[ -n "$path_filter" ]]; then
        # Apply path filter with grep, ensuring it matches at the beginning of the path
        # Adding ^ to ensure it only matches at the beginning of the path
        result=$(eval "$git_cmd" | grep -v "^$" | grep -E "^$path_filter" | sort | uniq -c | sort -nr | head -n "$limit")
    else
        # No path filter
        result=$(eval "$git_cmd" | grep -v "^$" | sort | uniq -c | sort -nr | head -n "$limit")
    fi
    
    # Check if we have results
    if [[ -z "$result" ]]; then
        echo -e "${yellow}Warning: No results found with applied filters.${white}"
        return 1
    fi
    
    # Format and display output
    echo -e "Count | File"
    echo -e "------------------"
    echo "$result" | awk '{printf "  %4d | %s\n", $1, $2}'
    
    return 0
}

main() {
    # Default values
    local path_filter=""
    local author_filter=""
    local limit=10
    local since_date=""
    
    # Process arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                usage
                exit 0
                ;;
            -p|--path)
                if [[ -n "$2" && "$2" != -* ]]; then
                    path_filter="$2"
                    shift 2
                else
                    echo -e "${red}Error: Missing argument for $1${white}"
                    exit 1
                fi
                ;;
            -a|--author)
                if [[ -n "$2" && "$2" != -* ]]; then
                    author_filter="$2"
                    shift 2
                else
                    echo -e "${red}Error: Missing argument for $1${white}"
                    exit 1
                fi
                ;;
            -n|--limit)
                if [[ -n "$2" && "$2" != -* ]]; then
                    if [[ "$2" =~ ^[0-9]+$ ]]; then
                        limit="$2"
                        shift 2
                    else
                        echo -e "${red}Error: Invalid value for $1: $2 (must be an integer)${white}"
                        exit 1
                    fi
                else
                    echo -e "${red}Error: Missing argument for $1${white}"
                    exit 1
                fi
                ;;
            -s|--since)
                if [[ -n "$2" && "$2" != -* ]]; then
                    # Let Git validate the date format
                    if ! git log --since="$2" &> /dev/null; then
                        echo -e "${red}Error: Invalid date format for $1: $2${white}"
                        exit 1
                    fi
                    since_date="$2"
                    shift 2
                else
                    echo -e "${red}Error: Missing argument for $1${white}"
                    exit 1
                fi
                ;;
            *)
                echo -e "${red}Error: Unknown option: $1${white}"
                echo "Use --help to see available options."
                exit 1
                ;;
        esac
    done
    
    get_hot_files "$path_filter" "$author_filter" "$limit" "$since_date"
}

# Run initial checks
check_dependencies
check_git_repo

# Start the script
main "$@"
