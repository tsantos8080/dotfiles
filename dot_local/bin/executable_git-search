#!/usr/bin/zsh

# Output colors
blue='\e[1;34m'
red='\e[1;31m'
white='\e[0;37m'

# Print usage message
usage() {
    local program_name
    program_name=${0##*/}
    cat <<EOF
Usage: $program_name <search_term> [file_path]

Options:
    --help    Show this message
    
Arguments:
    search_term    Term to search in commits
    file_path      Optional path to limit the search
EOF
}

# Check if inside a git repository
check_git_repo() {
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        echo -e "${red}Error: Not in a git repository${white}"
        exit 1
    fi
}

# Main search function
search_commits() {
    local term="$1"
    local filepath="${2:-}"
    
    # Get repository path
    local REPO_PATH
    REPO_PATH=$(git config --get remote.origin.url | sed 's|git@github.com:||;s|\.git||')

    # Set base URL for commits
    local REPO_URL="https://github.com/$REPO_PATH/commit/"

    echo -e "${blue}Searching commits with term: $term${white}"
    if [ -n "$filepath" ]; then
        echo -e "${blue}In file: $filepath${white}\n"
    else
        echo -e "${blue}In all files${white}\n"
    fi

    # Execute search and format output
    git log --oneline --decorate --reverse -S "$term" $filepath | while read -r line ; do
        commit_hash=$(echo $line | awk '{print $1}')
        commit_url="$REPO_URL$commit_hash"
        echo "$line" | sed "s|$commit_hash|\x1b[34m$commit_url\x1b[0m|"
    done | less -RC
}

main() {
    case "$1" in
        ''|-h|--help)
            usage
            exit 0
            ;;
        *)
            if [ $# -lt 1 ]; then
                echo -e "${red}Error: Search term is required${white}"
                usage
                exit 1
            fi
            
            check_git_repo
            search_commits "$1" "$2"
            ;;
    esac
}

main "$@"

